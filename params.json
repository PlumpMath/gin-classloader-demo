{"name":"GinBridgeClassLoader Demo","tagline":"","body":"# gin-classloader-demo\r\n\r\nThis code reproduces a problem while using gin within a custom classloader\r\nand provides three possible solutions.\r\n\r\nRunning the GWT-Compiler within a classloader other than the system classloader may lead\r\nto a very confusing error message stating that a gin-injector is supposedly not derived\r\nfrom Ginjector. Cause for that is a comparison between classes from different classloaders\r\nfound in the following snippet from the `GinjectorGenerator` class:\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    // Due to deferred binding we assume that the requested class has to be a ginjector.\r\n    private Class<? extends Ginjector> getGinjectorType(String requestedClass)\r\n        throws ClassNotFoundException {\r\n\r\n      // We choose not to initialize ginjectors since we do not require it for reflective analysis and\r\n      // some people statically call GWT.create in them (which is illegal during Gin generator runs).\r\n      Class<?> type = loadClass(requestedClass, false);\r\n      if (!Ginjector.class.isAssignableFrom(type)) {\r\n       throw new IllegalArgumentException(\"The type passed does not inherit from Ginjector - \"\r\n           + \"please check the deferred binding rules.\");\r\n      }\r\n    \r\n      return (Class<? extends Ginjector>) type;\r\n    }\r\n\r\nMore precisely it's the `Ginjector.class.isAssignableFrom(type)` comparison that fails.\r\n\r\nI came up with a bunch of possible solution to the problem:\r\n\r\n 1. Use the `GinBridgeClassLoader` that is also used to load the `type` to load the Ginjector interface\r\n    instead of comparing against `Ginjector.class`.\r\n 2. Use the own classloader (namely `GinBridgeClassLoader.class.getClassLoader()`) as\r\n    parent classloader of the `GinBridgeClassLoader`.\r\n 3. Use the current thread's context classloader as parent of the `GinBridgeClassLoader`\r\n\r\nThe first solution does not work, because it is not feasible to access the injector's annotations later on.\r\nSince GWT uses the current thread's context classloader to load the GinjectorGenerator, the second and third\r\nsolution are identical for all practical purposes.\r\n\r\n\r\n## Build\r\n\r\nYou can use Maven as well as Ant to build the project.\r\n\r\n\r\n### Maven\r\n\r\nTo build the project simply run from the project root\r\n\r\n    mvn package\r\n\r\nTo run the demo run\r\n\r\n    mvn verify\r\n\r\nThe provided fixes are selectable via profiles. To run the Demo with the first applied run\r\n\r\n    mvn verify -P fix-1\r\n\r\nThe same goes for the second and third fix.\r\n\r\n\r\n### Ant\r\n\r\nBefore you can run the Ant build you need to put the following jars into the \"lib\" directory in the project root\r\n\r\n * aopalliance-1.0.jar\r\n * gin-2.0.0.jar\r\n * guice-3.0.jar\r\n * guice-assistedinject-3.0.jar\r\n * gwt-dev-2.5.1.jar\r\n * gwt-user-2.5.1.jar\r\n * javax.inject-1.jar\r\n * json-20090211.jar\r\n * validation-api-1.0.0.GA.jar\r\n * validation-api-1.0.0.GA-sources.jar\r\n\r\nTo build the project just run ant\r\n\r\n    ant\r\n\r\nthere is a bunch of shell scripts to run the demo afterwards (namely `run-demo.sh` and `run-demo-with-fix-[123].sh`).\r\n\r\n# Authors\r\n\r\nEric Karge <eric.karge@hypoport.de>\r\n\r\n\r\n# License\r\n     Copyright 2012 Eric Karge\r\n\r\n     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     you may not use this file except in compliance with the License.\r\n     You may obtain a copy of the License at\r\n\r\n         http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n     Unless required by applicable law or agreed to in writing, software\r\n     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     See the License for the specific language governing permissions and\r\n     limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}